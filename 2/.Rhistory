#clear the workspace of all prior variables
rm(list=ls())
P<-c(0, -1, +1, -1, +1)
T<-c(0, -1, -1, +1, +1)
y<-c(407, 193, 468, 310, 571)
model.base.1<-lm(y~P*T)
summary(model.base.1)
contourPlot(model.base.1, "P", "T")
#clear the workspace of all prior variables
rm(list=ls())
P<-c(0, -1, +1, -1, +1)
T<-c(0, -1, -1, +1, +1)
y<-c(407, 193, 468, 310, 571)
model.base.1<-lm(y~P*T)
summary(model.base.1)
contourPlot(model.base.1, "P", "T")
#predict the points, using the model:
predict(model.base.1, data.frame(P=P, T=T))
#-----------------
P<-c(0, -1, +1, -1, +1)
T<-c(0, -1, -1, +1, +1)
y<-c(657, 571, 669, 620, 710)
model.base.2<-lm(y~P*T)
summary(model.base.2)
contourPlot(model.base.2, "P", "T")
# Predict directly from least squares model, for experiment 9
predict(model.base.2, data.frame(P=1.5, T=.75))
# Step further out to point 10
P_coded = (1.63 - 1.18)/(0.5*0.36)
T_coded = (339 - 334)/(0.5*8)
predict(model.base.2, data.frame(P=P_coded, T=T_coded))
predict(model.base.2, data.frame(T=0.75, P=1.5))
model.base.3<-lm(y~P*T)
summary(model.base.3)
contour(model.base.3)
contour(model.base.3, "P", "T")
contour(model.base.3, "P", "T", "y")
contourPlot(model.base.3, "P", "T")
contourPlot(model.base.3, "P", "T", main = "Regular Design")
P<-c(0, -1, +1, -1, +1)
T<-c(0, -2/3, -1, 1, 1)
y<-c(732, 715, 713, 733, 725)
model.base.4<-lm(y~P*T)
summary(model.base.4)
model.base.4<-lm(y~P*T)
summary(model.base.4)
contourPlot(model.base.4, "P", "T", main="With an extra degree of freedom")
P<-c(0, -1, 1, -1, 1, -1)
T<-c(0, -1, -1, 1, 1, -2/3)
y<-c(732, 715, 713, 733, 725, 717)
model.base.4.extra<-lm(y~P*T)
summary(model.base.4.extra)
contourPlot(model.base.4.extra, "P", "T", main ="With an extra degree of freedom")
# Back to model 3: points 10, 11, 12, 13, 14
P <- c(  0,  -1,  +1,  -1,  +1)
T <- c(  0,  -1,  -1,  +1,  +1)
y <- c(732, 715, 713, 733, 725)
model.3 <- lm(y ~ P*T)
contourPlot(model.3, "P", "T", main="Factorial 3: using points 10 to 14")
predict(model.3, data.frame(P=-2/3, T=+2))
summary(model.3)
# Demonstrate curvature effects due to omitting the interaction term
P <- c(  0,  -1,  +1,  -1,  +1)
T <- c(  0,  -1,  -1,  +1,  +1)
y <- c(732, 715, 713, 733, 725)
model.5 <- lm(y ~ P + T)
summary(model.5)
# notice the model is different, but the coefficients are the same.
contourPlot(model.3, "P", "T", main="Contour plot WITH interaction term")
contourPlot(model.5, "P", "T", main="Contour plot with NO interaction term")
P <- c(  0,  -1,  +1,  -1,  +1)
T <- c(  0,  -1,  -1,  +1,  +1)
y.fake <- c(722, 715, 725, 740, 721)
model.6 <- lm(y.fake ~ P*T)
contourPlot(model.6, "P", "T", main="System with much stronger interaction")
summary(model.6)
(1.38 - 1.63)/(0.5*0.36)
(1.88 - 1.63)/(0.5*0.36)
(335 - 339)/(0.5*6)
(343 - 339)/(0.5*6)
library("pid", lib.loc="~/R/win-library/3.4")
tradeOffTable()
source('C:/Users/Kamanga/Dropbox/running_experiments/5/graded quiz/5E - 5G/1.R', echo=TRUE)
A<-c(-1, 1, -1, 1, 0)
B<-c(-1, -1, 1, 1, 0)
C<-c(1, -1, -1, 1, 0)
#the outcome, yield of the batch
y<-c(80, 86, 82, 89, 84)
#the linear model
yield<-lm(y~A*B)
#summary, pareto plot and contour plot of the linear model
summary(yield)
paretoPlot(yield)
contourPlot(yield, "A", "B", "C", main = "Yield")
contourPlot(yield)
contourPlot(yield, "A", "B", main = "Yield")
source('C:/Users/Kamanga/Dropbox/running_experiments/5/graded quiz/5E - 5G/1.R', echo=TRUE)
contourPlot(yield, main = "Yield")
source('C:/Users/Kamanga/Dropbox/running_experiments/5/graded quiz/5E - 5G/1.R', echo=TRUE)
predict(yield, data.frame(A=18/5, B=+1))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
contourPlot(yield.1)
# the outcome variable, y, number of weeds in soil patch
P<-c(-1, 1, -1, 1)
T<-c(-1, -1, 1, 1)
#the outcome variables
y<-c(12, 5, 13, 6)
#linear model
no_weeds<-lm(y~P*T)
summary(no_weeds)
contourPlot(no_weeds)
library("pid", lib.loc="~/R/win-library/3.4")
source('C:/Users/Kamanga/Dropbox/running_experiments/5/graded quiz/5E - 5G/3.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/Kamanga/Dropbox/running_experiments/5/graded quiz/5E - 5G/5.R', echo=TRUE)
summary(taste)
summary(taste)
M.1<-c(M, 0, 1.41, 0, -1.41)
H.1<-c(H, -1.41, 0, 1.41, 0)
y.1<-c(y, 8, 8, 4, 2)
taste.1<-lm(y~M.1*H.1+I(H.1^2)+I(M.^2))
contourPlot(taste.1)
summary(taste.1)
M.1<-c(M, 0, 1.41, 0, -1.41)
H.1<-c(H, -1.41, 0, 1.41, 0)
y.1<-c(y, 8, 8, 4, 2)
taste.1<-lm(y~M.1*H.1+I(H.1^2)+I(M.1^2))
contourPlot(taste.1)
summary(taste.1)
M<-c(-1, 1, -1, 1, 0)
H<-c(-1, -1, 1, 1, 0)
# the outcome, y, taste rating
y<-c(4, 9.5, 5, 5.5, 8)
taste<-lm(y~M*H)
contourPlot(taste, "M", "H", main="Beer Taste")
summary(taste)
M<-c(-1, 1, -1, 1, 0)
H<-c(-1, -1, 1, 1, 0)
# the outcome, y, taste rating
y<-c(4, 9.5, 5, 5.5, 8)
taste<-lm(y~M*H)
contourPlot(taste, "M", "H", main="Beer Taste")
summary(taste)
M.1<-c(M, 0, 1.41, 0, -1.41)
H.1<-c(H, -1.41, 0, 1.41, 0)
y.1<-c(y, 8, 8, 4, 2)
taste.1<-lm(y~M.1*H.1+I(H.1^2)+I(M.1^2))
contourPlot(taste.1)
summary(taste.1)
M<-c(-1, 1, -1, 1, 0)
H<-c(-1, -1, 1, 1, 0)
# the outcome, y, taste rating
y<-c(4, 9.5, 5, 5.5, 8)
taste<-lm(y~M*H)
contourPlot(taste, "M", "H", main="Beer Taste")
summary(taste)
M<-c(M, 0, 1.41, 0, -1.41)
H<-c(H, -1.41, 0, 1.41, 0)
y<-c(y, 8, 8, 4, 2)
taste.1<-lm(y~M*H+I(H^2)+I(M^2))
contourPlot(taste.1)
summary(taste.1)
A=array(c(2.76, -1.25, 1.25, -1.74))
A
A=array(c(2.76, -1.25, 1.25, -1.74), c(2,2))
A
b = c(1.81, 1.08)
b
solve(A,b)
library("pid", lib.loc="~/R/win-library/3.4")
D<-P<-B<-c(-1, +1)
design<-expand.grid(D=D, P=P, B=B)
D<-design$D
D<-design$D
D<-design$D
D
P<-design$P
B<-design$B
B
runif(1, min=0, max=8)
runint(1, min=0, max=8)
runif(1, min=0, max=8)
integer(runif(1, min=0, max=8))
as.integer(runif(1, min=0, max=8))
as.integer(runif(1, min=0, max=8))
as.integer(runif(1, min=0, max=8))
as.integer(runif(1, min=0, max=8))
as.integer(runif(1, min=0, max=8))
as.integer(runif(1, min=0, max=8))
as.integer(runif(1, min=0, max=8))
as.integer(runif(1, min=0, max=8))
as.integer(runif(1, min=0, max=8))
as.integer(runif(1, min=1, max=8))
as.integer(runif(1, min=1, max=8))
as.integer(runif(1, min=1, max=8))
as.integer(runif(1, min=1, max=8))
as.integer(runif(1, min=1, max=8))
as.integer(runif(1, min=1, max=8))
as.integer(runif(1, min=1, max=8))
as.integer(runif(1, min=1, max=8))
as.integer(runif(1, min=1, max=8))
as.integer(runif(1, min=1, max=8))
as.integer(runif(1, min=1, max=8))
as.integer(runif(1, min=1, max=8))
as.integer(runif(1, min=1, max=11))
as.integer(runif(1, min=1, max=8))
as.integer(runif(1, min=1, max=8))
as.integer(runif(1, min=1, max=8))
as.integer(runif(1, min=1, max=8))
as.integer(runif(1, min=1, max=8))
source('~/.active-rstudio-document', echo=TRUE)
predict(waste, data.frame(D=D, P=P, B=B))
predict(waste, data.frame(D=D, P=P, B=B))
library("pid", lib.loc="~/R/win-library/3.4")
D<-P<-B<-c(-1, +1)
design<-expand.grid(D=D, P=P, B=B)
D<-design$D
P<-design$P
B<-design$B
# the outcome variable, y, residue concentratrion
#y<-c(3088, 1488, 2944, 1419, 2373, 1006, 2260, 953)
y<-c(3093, 1494, 2956, 1412, 2371, 1005, 2266, 954)
# linear model
waste<-lm(y~D*P*B)
summary(waste)
paretoPlot(waste)
predict(waste, data.frame(D=D, P=P, B=B))
predict(waste, data.frame(D, P, B))
#predict(waste, data.frame(D, P, B))
contourPlot(waste, main="Waste")
source('C:/Users/Kamanga/Dropbox/running_experiments/coagulation.R', echo=TRUE)
predict(waste, data.frame(D, P, B))
predict(waste, data.frame(D=D, P=P, B=B))
D
# Model 2
D<-P<-B<-c(-1, +1)
design<-expand.grid(D=D, P=P, B=B)
D<-design$D
P<-design$P
B<-design$B
D<-c(D, 0)
P<-c(P, 0)
B<-c(B, 0)
# the outcome variable, y, residue concentration
y.2<-c(950, 236, 889, 230, 599, 109, 564, 134, 454)
# linear model
waste.2<-lm(y~D*P*B)
summary(waste.2)
paretoPlot(waste.2)
predict(waste.2, data.frame(D=D, P=P, B=B))
contourPlot(waste.2, main="Waste 2")
D<-P<-B<-c(-1, +1)
design<-expand.grid(D=D, P=P, B=B)
D<-design$D
P<-design$P
B<-design$B
D<-c(D, 0)
P<-c(P, 0)
B<-c(B, 0)
# the outcome variable, y, residue concentration
y.2<-c(950, 236, 889, 230, 599, 109, 564, 134, 454)
# linear model
waste.2<-lm(y.2~D*P*B)
summary(waste.2)
paretoPlot(waste.2)
predict(waste.2, data.frame(D=D, P=P, B=B))
contourPlot(waste.2, main="Waste 2")
#--------------------------------------
# Model 2 without interactions
D<-P<-B<-c(-1, +1)
design<-expand.grid(D=D, P=P, B=B)
D<-design$D
P<-design$P
B<-design$B
D<-c(D, 0)
P<-c(P, 0)
B<-c(B, 0)
# the outcome variable, y, residue concentration
y.2<-c(950, 236, 889, 230, 599, 109, 564, 134, 454)
# linear model
waste.2<-lm(y.2~D+P+B)
summary(waste.2)
paretoPlot(waste.2)
predict(waste.2, data.frame(D=D, P=P, B=B))
contourPlot(waste.2, main="Waste 2")
contourPlot(waste.2, main="Waste without interaction terms")
# running half the number of experiments in file 3
# 3 same factors as in file 3
D<-c(-1, +1, -1, +1)
R<-c(-1, -1, +1, +1)
P<-c(+1, -1, -1, +1)
#the outcome variable
y<-c(3, 9, 3, 7)
#linear model
taste.mod<-lm(y~D*R*P)
#summary and paretoplot
summary(taste.mod)
paretoPlot(taste.mod)
library("pid", lib.loc="~/R/win-library/3.4")
# running half the number of experiments in file 3
# 3 same factors as in file 3
D<-c(-1, +1, -1, +1)
R<-c(-1, -1, +1, +1)
P<-c(+1, -1, -1, +1)
#the outcome variable
y<-c(3, 9, 3, 7)
#linear model
taste.mod<-lm(y~D*R*P)
#summary and paretoplot
summary(taste.mod)
paretoPlot(taste.mod)
pnorm(-1, mean=0, sd=1)
pnorm(-1, mean=0, sd=1)
pnorm(0, mean = 0, sd = 1)
pnorm(0, mean = 1, sd = 1)
pnorm(0, mean = -1, sd = 1)
setwd("C:/Users/Kamanga/Desktop/rcode/2")
rm<-read.csv('raw-material-properties.csv')
head(rm)
ncol(rm) #counts the unique number of columns
nrow(rm) #counts the unique number of rows
# Plot the data for size 1
plot(rm$size1, ylab="Particle size: level 1")
boxplot(rm$size1)
# This fu
identify(rm$size1, labels=rm$Sample)
