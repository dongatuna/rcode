A<-c(-1, 1, -1, 1)
B<-c(-1, -1, 1, 1)
popped_corn <- lm(y~A+B+A*B)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
popped_corn
summary(popped_corn)
popped <-lm(A*B)
popped<-lm(A*B)
popped<-lm(y~A*B)
popped<-lm(y~A*B)
summary(popped)
summary(biscuit_taste)
summary(biscuit_taste)
summary(biscuit_taste)
A<-c(-1, 1, -1, 1)
B<-c(-1, -1, 1, 1)
y<-c(3, 5, 4, 9)
biscuit_taste<-lm(y~A*B)
biscuit_taste
summary(biscuit_taste)
C
C<-S<-T<-c(-1, 1)
C
design <- expand.grid(C=C, S=S, T=T)
C<-design$C
S<-design$S
T<-design$S
design
summary(design)
design <- expand.grid(C=C, S=S, T=T)
C<-design$C
S<-design$S
T<-design$T
design
clear
C<-S<-T<-c(-1, 1)
#create standard order table for C, S, T
design <- expand.grid(C=C, S=S, T=T)
C<-design$C
S<-design$S
T<-design$T
design
summary(water)
design <- expand.grid(C=C, S=S, T=T)
C<-design$C
S<-design$S
T<-design$T
#outcome containing the 8 outcome values
y<-c(5, 30, 6, 33, 4, 3, 5, 4)
water <- lm(y~C+T+S+C*T+C*S+S*T+C*S*T)
summary(water)
design <- expand.grid(C=C, S=S, T=T)
C<-design$C
S<-design$S
T<-design$T
#outcome containing the 8 outcome values
y<-c(5, 30, 6, 33, 4, 3, 5, 4)
water <- lm(y~C+T+S+C*T+C*S+S*T+C*S*T)
source('C:/Users/ngatu/Desktop/experimentation fro improvement/3/water.R', echo=TRUE)
summary(water)
water<-lm(y~C*S*T)
summary(water)
install.packages("pid")
library(pid)
source('C:/Users/ngatu/Desktop/experimentation fro improvement/3/water.R', echo=TRUE)
source('C:/Users/ngatu/Desktop/experimentation fro improvement/3/water.R')
source('C:/Users/ngatu/Desktop/experimentation fro improvement/3/water.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(model.y1, model.y2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
paretoPlot(model.y1)
library(pid)
data(solar)
model.y1<-lm(y1~A*B*C*D, data=solar)
summary(model.y1)
paretoPlot(model.y1)
model.y2<-lm(y2~A*B*C*D, data=solar)
summary(model.y2)
paretoPlot(model.y2)
#code the factors
H<-I<-S<-c(-1, +1)
S
design<-expand.grid(H=H, I=I, S=S)
H<-design$H
I<-design$I
S<-design$S
H
HIS
H, I, S
design
symptoms<-lm(y~H*I*S)
summary(symptoms)
source('~/.active-rstudio-document', echo=TRUE)
library(pid)
help(tradeOffTable)
library("pid", lib.loc="~/R/win-library/3.4")
library("pid", lib.loc="~/R/win-library/3.4")
source('C:/Users/ngatu/Dropbox/running_experiments/5 II/1.R', echo=TRUE)
#ungraded practice quiz number 1
#objective is to minimize weeds that sprout using soil solarization process
#the independent factors used are:
#factor P = duration of solarization period: low level is 4 weeks, high level is 6 weeks
#factor T = thickness of plastic: low level is 0.05 mm, high level is 0.1 mm
P<-c(-1, +1, -1, +1, 0)
#T<-c(-1, -1, +1, +1)
#the outcome variable, y, is the number of weeds that sprouted in soil patch after a week solarization
y<-c(12, 5, 13, 6, 8)
#the linear model of the outcome variable
number_of_weeds<-lm(y~P+I(P^2))
#the summary of the linear model
summary(number_of_weeds)
8-3.5*3+3^2
#ungraded practice quiz number 2
#the objective is to maximize followers and number of retweets
#the independent factors are:
#factor N = number of posts per day: low level is 2, high level is 5
#factor R = ratio of original content to re-post content: low level is 1:2, high level is 2:1
#factor T = tone of the message: low level is casual, high level is formal and authoritative
N<-c(-1, +1, -1, +1)
R<-c(-1, -1, +1, +1)
#factor T is generated from factors N and R
T<-N*R
#there are 2 outcome variables - the first one, y1, the number of new followers
y1<-c(125, 130, 120, 135)
#the second outcome variable, y2, is the number of re-tweets
y2<-c(75, 100, 78, 103)
#linear model for new followers, y1, and number of re-tweets, y2
new_followers<-lm(y1~N*R*T)
number_of_retweets<-lm(y2~N*R*T)
#the summary of y1, the number of new followers
summary(new_followers)
summary(number_of_retweets)
#ungraded practice quiz number 2
#the objective is to maximize followers and number of retweets
#the independent factors are:
#factor N = number of posts per day: low level is 2, high level is 5
#factor R = ratio of original content to re-post content: low level is 1:2, high level is 2:1
#factor T = tone of the message: low level is casual, high level is formal and authoritative
N<-c(-1, +1, -1, +1, 0)
R<-c(-1, -1, +1, +1, 0)
#factor T is generated from factors N and R
T<-c(+1, -1, -1, +1, +1)
#there are 2 outcome variables - the first one, y1, the number of new followers
y1<-c(125, 130, 120, 135, 128)
#the second outcome variable, y2, is the number of re-tweets
#y2<-c(75, 100, 78, 103)
#linear model for new followers, y1, and number of re-tweets, y2
new_followers<-lm(y1~N*R*T)
#number_of_retweets<-lm(y2~N*R*T)
#the summary of y1, the number of new followers
summary(new_followers)
H<-S<-c(-1, +1)
design<-expand.grid(H=H, S=S)
H<-design$H
S<-design$S
S
H
#question 3 in ungraded practice quiz 5A - 5D
#the outcome is to minimize the program costs of recyling electronics devices
#the independent factors and hours per week and number of recycling depot opened
#factor H = hours per week the sites are open: low level is 8 hours, high level is 12 hours
#factor S = number of electronics recyling depot sites available: low level is 2, high level is 6
H<-S<-c(-1, +1)
design<-expand.grid(H=H, S=S)
H<-design$H
S<-design$S
#the outcome variable, y, is the program cost per tonne of electronics recycled
y<-c(200, 150, 120, 100)
#the linear model
cost_per_tonne<-lm(y~H*S)
#summary of the linear model
summary(cost_per_tonne)
#question 4 in ungraded practice quiz 5A - 5D
#the objective is to maximize the number of students enrolled in the program
#the are 2 independent factors
#factor L = length of class: low level is 1.5 hours, high level is 3 hours
#factor N = number of the program runs for: low level is 4 weeks, high level is 6 weeks
L<-c(-1, 1, -1, 1)
N<-c(-1, -1, 1, 1)
#the outcome variable, y, is the number of enrolled students
y<-c(85, 70, 50, 40)
#the linear model fo outcome variable
students_enrolled<-lm(y~L*N)
#summary of the linear model
summary(students_enrolled)
61.25-6.25*-7/3-16.25*-2+1.25*14/3
77-2*2-1.5*4
67-4*2-5+.7*2
#question 6 of ungraded practice quiz 5A - 5D
#the outcome variable is range of temperature predetermined by a cooling setting
#the objective is to minimize that temperature
#independent factors to investigate
#factor A is compressor power: low level is 300W, high level is 500W
#factor B is refrigerator size: low level is 50 L and high level is 80 L
#factor C is insulation thickness: low level is 8 cm, high level is 12 cm
B<-c(-1, -1, +1, +1)
A<-c(-1, +1, -1, +1)
#factor C is generated from factors A and B
C<-A*B
#the outcome, y, the final steady temperature
y<-c(8, 3, 8, 4)
#the linear model
temp_dir<-lm(y~A*B*C)
#summary of the linear model
summary(temp_dir)
#question 6 of ungraded practice quiz 5A - 5D
#the outcome variable is range of temperature predetermined by a cooling setting
#the objective is to minimize that temperature
#independent factors to investigate
#factor A is compressor power: low level is 300W, high level is 500W
#factor B is refrigerator size: low level is 50 L and high level is 80 L
#factor C is insulation thickness: low level is 8 cm, high level is 12 cm
#B<-c(-1, -1, +1, +1)
A<-c(-1, +1, -1, +1, 3)
#factor C is generated from factors A and B
#C<-A*B
#the outcome, y, the final steady temperature
y<-c(8, 3, 8, 4, -6)
#the linear model
temp_dir<-lm(y~A+I(A^2))
#summary of the linear model
summary(temp_dir)
6.38-2.25*2-.625*4
6.38-2.25*2-.625*4
10^0.95
10^0.97
100^0.95
100^0.97
x <- as.integer(runif(50, 2, 11))
library("pid", lib.loc="~/R/win-library/3.4")
x <- as.integer(runif(50, 2, 11))
x <- as.integer(runif(50, 2, 11))
x <- as.integer(runif(50, 2, 11))
x <- as.integer(runif(50, 2, 11))
sd(x)
sd(x)
var(x)
MAD(x)
median(x)
x <- as.integer(runif(50, 2, 11))
sd(x)
var(x)
median(x)
MAD(x)
mad(x)
pnorm(-1, mean=0, sd=1)
v.yield = c(23, 19, 17, 18, 24, 26, 21, 14, 18)
summary(v.yield)
v.sd<-sd(v.yield)
v.sd
v.sd<-sd(v.yield)
sd(v.yield)
index<-(N-0.05)/N
N = 9;
index<-seq(1, N)
z.ideal = (index -0.05)/N
N = 9;
index<-seq(1, N)
z.ideal = (index -0.05)/N
z.ideal
N = 9;
index<-seq(1, N)
# there are 9 observations, so N = 9
N = 9;
index<-seq(1, N)
index
N = 9;
index<-seq(1, N)
z.ideal = (index -0.05)/N
theoretical.z<-qnorm(z.ideal)
library("car", lib.loc="~/R/win-library/3.4")
theoretical.z
hist(theoretical.z)
v.yield = c(23, 19, 17, 18, 24, 26, 21, 14, 18)
z.mean <- mean(v.yield)
z.sd <- sd(v.yield)
z.actual <- sort(v.yield - z.mean)/z.sd
actual.z<-qnorm(z.actual)
hist(actual.z)
plot(theoretical.z, actual.z, p)
N = 9;
index<-seq(1, N)
z.ideal = (index -0.05)/N
theoretical.z<-qnorm(z.ideal)
theoretical.z
#hist(theoretical.z)
v.yield = c(23, 19, 17, 18, 24, 26, 21, 14, 18)
z.mean <- mean(v.yield)
z.sd <- sd(v.yield)
z.actual <- sort(v.yield - z.mean)/z.sd
actual.z<-qnorm(z.actual)
plot(theoretical.z, actual.z, type = "p")
N = 9;
index<-seq(1, N)
z.ideal = (index -0.05)/N
theoretical.z<-qnorm(z.ideal)
theoretical.z
#hist(theoretical.z)
v.yield = c(23, 19, 17, 18, 24, 26, 21, 14, 18)
z.mean <- mean(v.yield)
z.sd <- sd(v.yield)
z.actual <- sort(v.yield - z.mean)/z.sd
actual.z<-qnorm(z.actual)
plot(theoretical.z, actual.z, type = "p")
library(car)
qqPlot(v.yield)
qqPlot(z.actual)
qt(8)
qt(df=8)
qt(0.975, df=8) #gives the z ordinate
z.mean - Ct*z.sd/3
Ct <- qt(0.975, df=8) #gives the z ordinate, given a 0.975 area under the curve and a df of 8
z.mean - Ct*z.sd/3
z.mean + Ct*z.sd/3
boards<-read.csv('six-point-board-thickness.csv')
head(boards)
length(boards$Date.Time)
setwd("C:/Users/ngatu/Desktop/rcode/3/exercises")
# imports data of boards
boards<-read.csv('six-point-board-thickness.csv')
head(boards)
length(boards$Date.Time)
help(identify)
help(labels)
library("car", lib.loc="~/R/win-library/3.4")
boards<-read.csv('six-point-board-thickness.csv')
head(boards)
length(boards$Date.Time)
# help(identify)
# help(labels)
library(car)
help("scatterplot")
help(text)
